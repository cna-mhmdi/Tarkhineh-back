// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: favorites.sql

package db

import (
	"context"
)

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorites (
    username,
    food_id
) VALUES (
    $1, $2
)RETURNING id, username, food_id, added_at
`

type CreateFavoriteParams struct {
	Username string `json:"username"`
	FoodID   int64  `json:"food_id"`
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, createFavorite, arg.Username, arg.FoodID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FoodID,
		&i.AddedAt,
	)
	return i, err
}

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE FROM favorites
WHERE username = $1 AND food_id = $2
`

type DeleteFavoriteParams struct {
	Username string `json:"username"`
	FoodID   int64  `json:"food_id"`
}

func (q *Queries) DeleteFavorite(ctx context.Context, arg DeleteFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavorite, arg.Username, arg.FoodID)
	return err
}

const getFavorites = `-- name: GetFavorites :many
SELECT id, username, food_id, added_at FROM favorites
WHERE username = $1
`

func (q *Queries) GetFavorites(ctx context.Context, username string) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, getFavorites, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Favorite{}
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FoodID,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
