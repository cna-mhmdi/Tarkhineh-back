// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: profile.sql

package db

import (
	"context"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
    username,
    first_name,
    last_name,
    email,
    phone_number,
    birthday,
    nickname
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)RETURNING id, username, first_name, last_name, email, phone_number, birthday, nickname
`

type CreateProfileParams struct {
	Username    string `json:"username"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
	Birthday    string `json:"birthday"`
	Nickname    string `json:"nickname"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.Birthday,
		arg.Nickname,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Birthday,
		&i.Nickname,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, username, first_name, last_name, email, phone_number, birthday, nickname FROM profiles
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, username string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, username)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Birthday,
		&i.Nickname,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
set first_name = $2,
    last_name = $3,
    email = $4,
    phone_number = $5,
    birthday = $6,
    nickname = $7
WHERE id = $1
RETURNING id, username, first_name, last_name, email, phone_number, birthday, nickname
`

type UpdateProfileParams struct {
	ID          int64  `json:"id"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
	Birthday    string `json:"birthday"`
	Nickname    string `json:"nickname"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.Birthday,
		arg.Nickname,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Birthday,
		&i.Nickname,
	)
	return i, err
}
