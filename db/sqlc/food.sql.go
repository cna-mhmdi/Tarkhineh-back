// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: food.sql

package db

import (
	"context"
)

const createFood = `-- name: CreateFood :one
INSERT INTO food (
    name,
    description,
    price,
    rate,
    discount,
    food_tag
) VALUES (
    $1, $2, $3, $4, $5, $6
)RETURNING id, name, description, price, rate, discount, food_tag
`

type CreateFoodParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       int32  `json:"price"`
	Rate        int32  `json:"rate"`
	Discount    int32  `json:"discount"`
	FoodTag     string `json:"food_tag"`
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) (Food, error) {
	row := q.db.QueryRowContext(ctx, createFood,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Rate,
		arg.Discount,
		arg.FoodTag,
	)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Rate,
		&i.Discount,
		&i.FoodTag,
	)
	return i, err
}

const getFood = `-- name: GetFood :one
SELECT id, name, description, price, rate, discount, food_tag FROM food
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetFood(ctx context.Context, name string) (Food, error) {
	row := q.db.QueryRowContext(ctx, getFood, name)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Rate,
		&i.Discount,
		&i.FoodTag,
	)
	return i, err
}

const listFoods = `-- name: ListFoods :many
SELECT id, name, description, price, rate, discount, food_tag FROM food
ORDER BY food_tag
LIMIT $1
OFFSET $2
`

type ListFoodsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFoods(ctx context.Context, arg ListFoodsParams) ([]Food, error) {
	rows, err := q.db.QueryContext(ctx, listFoods, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Food{}
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Rate,
			&i.Discount,
			&i.FoodTag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFood = `-- name: UpdateFood :one
UPDATE food
set name = $2,
    description = $3,
    price = $4,
    rate = $5,
    discount = $6,
    food_tag = $7
WHERE id = $1
RETURNING id, name, description, price, rate, discount, food_tag
`

type UpdateFoodParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Price       int32  `json:"price"`
	Rate        int32  `json:"rate"`
	Discount    int32  `json:"discount"`
	FoodTag     string `json:"food_tag"`
}

func (q *Queries) UpdateFood(ctx context.Context, arg UpdateFoodParams) (Food, error) {
	row := q.db.QueryRowContext(ctx, updateFood,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Rate,
		arg.Discount,
		arg.FoodTag,
	)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Rate,
		&i.Discount,
		&i.FoodTag,
	)
	return i, err
}
