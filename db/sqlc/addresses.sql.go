// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: addresses.sql

package db

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses(
    username,
    address_line,
    address_tag,
    phone_number
) VALUES (
    $1, $2, $3, $4
)RETURNING id, username, address_line, address_tag, phone_number
`

type CreateAddressParams struct {
	Username    string `json:"username"`
	AddressLine string `json:"address_line"`
	AddressTag  string `json:"address_tag"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.Username,
		arg.AddressLine,
		arg.AddressTag,
		arg.PhoneNumber,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AddressLine,
		&i.AddressTag,
		&i.PhoneNumber,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :execresult
DELETE FROM addresses
WHERE username = $1 AND id = $2
`

type DeleteAddressParams struct {
	Username string `json:"username"`
	ID       int64  `json:"id"`
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAddress, arg.Username, arg.ID)
}

const getAddresses = `-- name: GetAddresses :many
SELECT id, username, address_line, address_tag, phone_number FROM addresses
WHERE username = $1
`

func (q *Queries) GetAddresses(ctx context.Context, username string) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddresses, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.AddressLine,
			&i.AddressTag,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE addresses
set address_line = $2,
    address_tag = $3,
    phone_number = $4
WHERE id = $1
RETURNING id, username, address_line, address_tag, phone_number
`

type UpdateAddressParams struct {
	ID          int64  `json:"id"`
	AddressLine string `json:"address_line"`
	AddressTag  string `json:"address_tag"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, updateAddress,
		arg.ID,
		arg.AddressLine,
		arg.AddressTag,
		arg.PhoneNumber,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AddressLine,
		&i.AddressTag,
		&i.PhoneNumber,
	)
	return i, err
}
